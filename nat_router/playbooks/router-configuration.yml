---
- name: Main router configuration
  hosts: router
  become: true
  gather_facts: true

  tasks:
    - name: Install iptables-persistent
      ansible.builtin.apt:
        update_cache: true
        name: iptables-persistent
        state: present

    - name: Enable ip forwarding
      ansible.posix.sysctl:
        name: net.ipv4.ip_forward
        value: 1
        state: present

    - name: Configure NAT debug
      debug:
        msg: "Interface {{ item }}"
      loop: '{{ ansible_interfaces | reject("in", [ansible_default_ipv4.interface,"lo"]) | list }}'

    - name: Masquerade internal IP from public
      # sudo iptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE
      ansible.builtin.iptables:
        table: "nat"
        chain: "POSTROUTING"
        out_interface: "{{ ansible_default_ipv4.interface }}"
        jump: "MASQUERADE"
        state: present

    - name: Forwarding packets from the internet interface to internal subnets interfaces
      # sudo iptables -A FORWARD -i eth0 -o eth1 -m state --state RELATED,ESTABLISHED -j ACCEPT
      ansible.builtin.iptables:
        chain: "FORWARD"
        in_interface: "{{ ansible_default_ipv4.interface }}"
        out_interface: "{{ item }}"
        ctstate:
          - RELATED
          - ESTABLISHED
        jump: "ACCEPT"
        state: present
      # Get all network interfaces connected to router, except loopback and default interface facing the internet.
      loop: '{{ ansible_interfaces | reject("in", [ansible_default_ipv4.interface,"lo"]) | list }}'
      
    - name: Forwarding packets from the internal subnets interfaces to internet interface
      # sudo iptables -A FORWARD -i eth1 -o eth0 -j ACCEPT
      ansible.builtin.iptables:
        chain: "FORWARD"
        in_interface: "{{ item }}"
        out_interface: "{{ ansible_default_ipv4.interface }}"
        jump: "ACCEPT"
        state: present
      # Get all network interfaces connected to router, except loopback and default interface facing the internet.
      loop: '{{ ansible_interfaces | reject("in", [ansible_default_ipv4.interface,"lo"]) | list }}'

    - name: Set Fact - regular expression to match inet facts
      ansible.builtin.set_fact:
        inet_regex: "^({{ansible_interfaces | join('|')}})$"
    
    - name: Set Fact - list of inet facts by inet_regex
      ansible.builtin.set_fact:
        inet_list: "{{ansible_facts | dict2items | selectattr('key', 'match', inet_regex) | map(attribute='value') | list}}"

    - name: Set Fact - host-only non internal interface by IP.
      ansible.builtin.set_fact:
        host_only_interface: "{{ inet_list | selectattr('ipv4.address', 'match', host_only_ip) | map(attribute='device') | first }}"
      
    - name: Masquerade host-only interface IP from internal subnets
      debug:
        msg: "{{host_only_interface}}"

    - name: Save iptables state
      ansible.builtin.shell: iptables-save >/etc/iptables/rules.v4

...